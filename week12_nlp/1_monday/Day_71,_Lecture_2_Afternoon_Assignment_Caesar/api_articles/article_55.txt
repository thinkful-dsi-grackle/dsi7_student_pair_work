So what strategies do you think are going to keep you relevant in the future?Things like "no-code development platform" or NCDP will perhaps lessen the demand of web developers.
Unreal Engine and Unity have maybe lessened the demand for game engine and graphics programmers.
It might be wrong to extrapolate out of these 2 trends, but it looks like more and more software developer positions will become less demanded/requested as we're heading towards full automation. And the resulting jobs are going to be more and more boring. So you are going to configure something rather than code something up from scratch.My strategy, albeit likely flawed, is:- focus on fundamentals: so instead of learning a graphics API like OpenGL 2.1 or OpenGL 4.x, study the fundamental algorithms underlying hardware and software. IOW: write a rasterizer, a ray tracer from scratch with only the standard libraries of a given programming language. (E.g. write a pure C++ software rasterizer or ray tracer by only using the C++ STL. Then output the result into a simple image format like PPM.)
I mostly ignore the naysayers here telling me that I am wasting my time reinventing the wheel and what not, but I actually really enjoy that process of learning why and how something works in the deepest levels.- focus on the core subjects that will give you the most bang for your buck: linear algebra has haunted me throughout my studies, so instead of resisting it, embrace it. You can't escape linear algebra really, if you are doing computer graphics, neural networks (back-propagation), Fourier transforms, image processing, probability theory. It's everywhere, and it is the most useful subject for computer science majors IMHO. Then maybe algorithms and formal and non-formal languages like (C, Japanese etc.). Everybody speaks English nowadays, so why not pick-up a new (human) language?What are your personal strategies?